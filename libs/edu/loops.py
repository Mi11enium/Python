
# Цикл for
# Цикл for в Python является одной из основных структур управления потоком программы и используется для итерации
# по последовательностям (таким как списки, диапазоны, строки) или итерируемым объектам.
# Он позволяет последовательно выполнять блок кода для каждого элемента в последовательности.

for i in range(5):
    print(i)# Блок кода, который будет выполняться для каждого элемента
    
# Бывают ситуации, когда переменная цикла не используется в теле цикла.
# В таком случае, вместо того, чтобы давать ей имя, мы можем указать символ нижнего подчеркивания _    
for _ in range(5):
    print('Python - awesome!')

# Логический паттерн
# для каждого [element] in [sequence] - выполни действие 

# Цикл for: Используется для перебора элементов последовательности и выполнения определенных действий для каждого элемента.
# Он удобен для обработки списков, массивов или любых итерируемых объектов.
# Оператор in: Служит для проверки наличия значения в последовательности.
# Он возвращает булевое значение и часто используется в условных операторах (if, while) для принятия решений
# на основе наличия или отсутствия значения

# Примечание. Следует помнить, что правая граница цикла в Python всегда не включительна. Таким образом следующий код:
for i in range(5):
    print(i)
# распечатает числа от 0 до 4

# Виды for (start, stop, step)

for i in range(10):  # 0 1 2 3 4 5 6 7 8 9
    print(i)

for i in range(1, 11):  # 1 2 3 4 5 6 7 8 9 10
    print(i)

for i in range(1, 11, 2):  # 1 3 5 7 9
    print(i)

# ЗАПОМНИТЬ!
# правая граница цикла в Python всегда не включительна!
# если переменная цикла не используется в теле цикла, использовать _


# Цикл while. Цикл while нужно использовать тогда, когда нам неизвестно количество итерации, либо нужно опр условие
# Цикл while должен иметь условие завершения, чтобы не стать бесконечным циклом.
# Нужно не забывать поставить это условие или итерировать счетчик переменной 


# Сторонние элементы
# Подсчет количества и суммы
# Если нам нужно агрегировать какие-то данные во время цикла, то обычно используеются счетчики суммы или количества -
# переменные, объявленные заранее вне цикла.
# ИСКЛЮЧЕНИЕ! При вычислении произведения, переменная счетчика должна быть 1, а не 0 !
multiple = 1
total = 0
counter = 0
for _ in range(10):
    counter = counter + 1  # or counter += 1
    total += i


# Сигнальные метки (flags)
# Используются чтобы одна часть программы узнала о происходящем в другой части программы
# ``

# Счетчик состоит из двух шагов:
# 1. Создание переменной счетчика и присвоения ей значения
# 2. Изменение значения переменной счетчика


# теги
# counter, multiple, total, flags, _, element in sequence, startstopstep


# Nested cycle
for i in range(3):
    for j in range(5):
        print('*')