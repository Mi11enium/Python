# Условные конструкции
# Задачи
# Принимать различные действия в зависимости от входных данных или состояния программы.
# Обрабатывать ошибки или исключительные ситуации.
# Осуществлять логику ветвления в алгоритмах.
# if выполняется если условие истинно, else - если ложно.


# Пример из реальной жизни
"""
время_дня = # получить текущее время
есть_люди_дома = # проверить, есть ли кто-то дома

if время_дня == 'вечер' or время_дня == 'ночь':
    if есть_люди_дома:
        включить_свет()
    else:
        выключить_свет()
else:
    выключить_свет()
"""

# Логический пример для запоминания
# Условие: "наступил вечер или ночь" и "кто-то есть дома".
# Действие при истинности: "включить свет".
# Действие при ложности: "выключить свет".






# Примеры использования

# if condition:
#     block code
# else:
#     blocke code2


# if condition:     # Первое условие
#    block code
# elif condition2:  # Второе условие
#    block code2
# else:             # Если False, то выполняется код в else
#    block code3


# ОПЕРАТОР BREAK
# Прекращает выполнение цикла (например, for или while) и выходит из него.
# Шаблон: "Прекратить и выйти из цикла".

# ОПЕРАТОР CONTINUE
# Пропускает оставшуюся часть текущей итерации цикла и переходит к следующей итерации.
# Шаблон: "Продолжить с следующей итерации".

# Задачи и проблемы, которые можно решить:

# Поиск определенного элемента в списке и прекращение поиска после его нахождения.
# Пропуск ненужных или уже обработанных элементов в цикле.
# Выход из бесконечного цикла при возникновении определенного условия.
# Оптимизация обработки данных, игнорируя ненужные элементы.